// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package raft.transport

@SerialVersionUID(0L)
final case class RequestVoteRequest(
    term: _root_.scala.Long = 0L,
    lastLogIndex: _root_.scala.Long = 0L,
    lastLogTerm: _root_.scala.Long = 0L,
    candicateId: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RequestVoteRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = term
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = lastLogIndex
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = lastLogTerm
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = candicateId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = term
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = lastLogIndex
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = lastLogTerm
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = candicateId
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withTerm(__v: _root_.scala.Long): RequestVoteRequest = copy(term = __v)
    def withLastLogIndex(__v: _root_.scala.Long): RequestVoteRequest = copy(lastLogIndex = __v)
    def withLastLogTerm(__v: _root_.scala.Long): RequestVoteRequest = copy(lastLogTerm = __v)
    def withCandicateId(__v: _root_.scala.Predef.String): RequestVoteRequest = copy(candicateId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = term
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = lastLogIndex
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = lastLogTerm
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = candicateId
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(term)
        case 2 => _root_.scalapb.descriptors.PLong(lastLogIndex)
        case 3 => _root_.scalapb.descriptors.PLong(lastLogTerm)
        case 4 => _root_.scalapb.descriptors.PString(candicateId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: raft.transport.RequestVoteRequest.type = raft.transport.RequestVoteRequest
    // @@protoc_insertion_point(GeneratedMessage[raft.transport.RequestVoteRequest])
}

object RequestVoteRequest extends scalapb.GeneratedMessageCompanion[raft.transport.RequestVoteRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[raft.transport.RequestVoteRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): raft.transport.RequestVoteRequest = {
    var __term: _root_.scala.Long = 0L
    var __lastLogIndex: _root_.scala.Long = 0L
    var __lastLogTerm: _root_.scala.Long = 0L
    var __candicateId: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __term = _input__.readInt64()
        case 16 =>
          __lastLogIndex = _input__.readInt64()
        case 24 =>
          __lastLogTerm = _input__.readInt64()
        case 34 =>
          __candicateId = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    raft.transport.RequestVoteRequest(
        term = __term,
        lastLogIndex = __lastLogIndex,
        lastLogTerm = __lastLogTerm,
        candicateId = __candicateId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[raft.transport.RequestVoteRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      raft.transport.RequestVoteRequest(
        term = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        lastLogIndex = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        lastLogTerm = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        candicateId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RaftProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RaftProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = raft.transport.RequestVoteRequest(
    term = 0L,
    lastLogIndex = 0L,
    lastLogTerm = 0L,
    candicateId = ""
  )
  implicit class RequestVoteRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, raft.transport.RequestVoteRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, raft.transport.RequestVoteRequest](_l) {
    def term: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.term)((c_, f_) => c_.copy(term = f_))
    def lastLogIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.lastLogIndex)((c_, f_) => c_.copy(lastLogIndex = f_))
    def lastLogTerm: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.lastLogTerm)((c_, f_) => c_.copy(lastLogTerm = f_))
    def candicateId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.candicateId)((c_, f_) => c_.copy(candicateId = f_))
  }
  final val TERM_FIELD_NUMBER = 1
  final val LASTLOGINDEX_FIELD_NUMBER = 2
  final val LASTLOGTERM_FIELD_NUMBER = 3
  final val CANDICATEID_FIELD_NUMBER = 4
  def of(
    term: _root_.scala.Long,
    lastLogIndex: _root_.scala.Long,
    lastLogTerm: _root_.scala.Long,
    candicateId: _root_.scala.Predef.String
  ): _root_.raft.transport.RequestVoteRequest = _root_.raft.transport.RequestVoteRequest(
    term,
    lastLogIndex,
    lastLogTerm,
    candicateId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[raft.transport.RequestVoteRequest])
}
