// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package raft.transport

@SerialVersionUID(0L)
final case class LogEntry(
    term: _root_.scala.Long = 0L,
    index: _root_.scala.Long = 0L,
    timestamp: _root_.scala.Predef.String = "",
    cmd: _root_.scala.Option[raft.transport.Command] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LogEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = term
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = index
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = timestamp
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (cmd.isDefined) {
        val __value = cmd.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = term
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = index
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = timestamp
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      cmd.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withTerm(__v: _root_.scala.Long): LogEntry = copy(term = __v)
    def withIndex(__v: _root_.scala.Long): LogEntry = copy(index = __v)
    def withTimestamp(__v: _root_.scala.Predef.String): LogEntry = copy(timestamp = __v)
    def getCmd: raft.transport.Command = cmd.getOrElse(raft.transport.Command.defaultInstance)
    def clearCmd: LogEntry = copy(cmd = _root_.scala.None)
    def withCmd(__v: raft.transport.Command): LogEntry = copy(cmd = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = term
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = index
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = timestamp
          if (__t != "") __t else null
        }
        case 4 => cmd.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(term)
        case 2 => _root_.scalapb.descriptors.PLong(index)
        case 3 => _root_.scalapb.descriptors.PString(timestamp)
        case 4 => cmd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: raft.transport.LogEntry.type = raft.transport.LogEntry
    // @@protoc_insertion_point(GeneratedMessage[raft.transport.LogEntry])
}

object LogEntry extends scalapb.GeneratedMessageCompanion[raft.transport.LogEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[raft.transport.LogEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): raft.transport.LogEntry = {
    var __term: _root_.scala.Long = 0L
    var __index: _root_.scala.Long = 0L
    var __timestamp: _root_.scala.Predef.String = ""
    var __cmd: _root_.scala.Option[raft.transport.Command] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __term = _input__.readInt64()
        case 16 =>
          __index = _input__.readInt64()
        case 26 =>
          __timestamp = _input__.readStringRequireUtf8()
        case 34 =>
          __cmd = Option(__cmd.fold(_root_.scalapb.LiteParser.readMessage[raft.transport.Command](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    raft.transport.LogEntry(
        term = __term,
        index = __index,
        timestamp = __timestamp,
        cmd = __cmd,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[raft.transport.LogEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      raft.transport.LogEntry(
        term = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        index = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        cmd = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[raft.transport.Command]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RaftProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RaftProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = raft.transport.Command
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = raft.transport.LogEntry(
    term = 0L,
    index = 0L,
    timestamp = "",
    cmd = _root_.scala.None
  )
  implicit class LogEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, raft.transport.LogEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, raft.transport.LogEntry](_l) {
    def term: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.term)((c_, f_) => c_.copy(term = f_))
    def index: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.index)((c_, f_) => c_.copy(index = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def cmd: _root_.scalapb.lenses.Lens[UpperPB, raft.transport.Command] = field(_.getCmd)((c_, f_) => c_.copy(cmd = Option(f_)))
    def optionalCmd: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[raft.transport.Command]] = field(_.cmd)((c_, f_) => c_.copy(cmd = f_))
  }
  final val TERM_FIELD_NUMBER = 1
  final val INDEX_FIELD_NUMBER = 2
  final val TIMESTAMP_FIELD_NUMBER = 3
  final val CMD_FIELD_NUMBER = 4
  def of(
    term: _root_.scala.Long,
    index: _root_.scala.Long,
    timestamp: _root_.scala.Predef.String,
    cmd: _root_.scala.Option[raft.transport.Command]
  ): _root_.raft.transport.LogEntry = _root_.raft.transport.LogEntry(
    term,
    index,
    timestamp,
    cmd
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[raft.transport.LogEntry])
}
