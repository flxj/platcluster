
// Generated by Akka gRPC. DO NOT EDIT.
package raft.transport

import akka.annotation.ApiMayChange

import akka.grpc.AkkaGrpcGenerated


@AkkaGrpcGenerated
trait RaftService {
  
  
  def requestVote(in: raft.transport.RequestVoteRequest): scala.concurrent.Future[raft.transport.RequestVoteResponse]
  
  
  def appendEntries(in: raft.transport.AppendEntriesRequest): scala.concurrent.Future[raft.transport.AppendEntriesResponse]
  
}



@AkkaGrpcGenerated
object RaftService extends akka.grpc.ServiceDescription {
  val name = "raft.transport.RaftService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    raft.transport.RaftProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val RequestVoteRequestSerializer = new ScalapbProtobufSerializer(raft.transport.RequestVoteRequest.messageCompanion)
    
    val AppendEntriesRequestSerializer = new ScalapbProtobufSerializer(raft.transport.AppendEntriesRequest.messageCompanion)
    
    val RequestVoteResponseSerializer = new ScalapbProtobufSerializer(raft.transport.RequestVoteResponse.messageCompanion)
    
    val AppendEntriesResponseSerializer = new ScalapbProtobufSerializer(raft.transport.AppendEntriesResponse.messageCompanion)
    
  }

  @ApiMayChange
  @AkkaGrpcGenerated
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val requestVoteDescriptor: MethodDescriptor[raft.transport.RequestVoteRequest, raft.transport.RequestVoteResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("raft.transport.RaftService", "RequestVote"))
        .setRequestMarshaller(new Marshaller(RequestVoteRequestSerializer))
        .setResponseMarshaller(new Marshaller(RequestVoteResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val appendEntriesDescriptor: MethodDescriptor[raft.transport.AppendEntriesRequest, raft.transport.AppendEntriesResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("raft.transport.RaftService", "AppendEntries"))
        .setRequestMarshaller(new Marshaller(AppendEntriesRequestSerializer))
        .setResponseMarshaller(new Marshaller(AppendEntriesResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
