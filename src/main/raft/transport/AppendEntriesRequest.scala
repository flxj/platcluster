// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package raft.transport

@SerialVersionUID(0L)
final case class AppendEntriesRequest(
    term: _root_.scala.Long = 0L,
    prevLogTrem: _root_.scala.Long = 0L,
    prevLogIndex: _root_.scala.Long = 0L,
    leaderCommit: _root_.scala.Long = 0L,
    leaderId: _root_.scala.Predef.String = "",
    entries: _root_.scala.Seq[raft.transport.LogEntry] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AppendEntriesRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = term
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = prevLogTrem
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = prevLogIndex
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = leaderCommit
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = leaderId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      entries.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = term
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = prevLogTrem
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = prevLogIndex
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = leaderCommit
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = leaderId
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      entries.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withTerm(__v: _root_.scala.Long): AppendEntriesRequest = copy(term = __v)
    def withPrevLogTrem(__v: _root_.scala.Long): AppendEntriesRequest = copy(prevLogTrem = __v)
    def withPrevLogIndex(__v: _root_.scala.Long): AppendEntriesRequest = copy(prevLogIndex = __v)
    def withLeaderCommit(__v: _root_.scala.Long): AppendEntriesRequest = copy(leaderCommit = __v)
    def withLeaderId(__v: _root_.scala.Predef.String): AppendEntriesRequest = copy(leaderId = __v)
    def clearEntries = copy(entries = _root_.scala.Seq.empty)
    def addEntries(__vs: raft.transport.LogEntry *): AppendEntriesRequest = addAllEntries(__vs)
    def addAllEntries(__vs: Iterable[raft.transport.LogEntry]): AppendEntriesRequest = copy(entries = entries ++ __vs)
    def withEntries(__v: _root_.scala.Seq[raft.transport.LogEntry]): AppendEntriesRequest = copy(entries = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = term
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = prevLogTrem
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = prevLogIndex
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = leaderCommit
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = leaderId
          if (__t != "") __t else null
        }
        case 6 => entries
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(term)
        case 2 => _root_.scalapb.descriptors.PLong(prevLogTrem)
        case 3 => _root_.scalapb.descriptors.PLong(prevLogIndex)
        case 4 => _root_.scalapb.descriptors.PLong(leaderCommit)
        case 5 => _root_.scalapb.descriptors.PString(leaderId)
        case 6 => _root_.scalapb.descriptors.PRepeated(entries.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: raft.transport.AppendEntriesRequest.type = raft.transport.AppendEntriesRequest
    // @@protoc_insertion_point(GeneratedMessage[raft.transport.AppendEntriesRequest])
}

object AppendEntriesRequest extends scalapb.GeneratedMessageCompanion[raft.transport.AppendEntriesRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[raft.transport.AppendEntriesRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): raft.transport.AppendEntriesRequest = {
    var __term: _root_.scala.Long = 0L
    var __prevLogTrem: _root_.scala.Long = 0L
    var __prevLogIndex: _root_.scala.Long = 0L
    var __leaderCommit: _root_.scala.Long = 0L
    var __leaderId: _root_.scala.Predef.String = ""
    val __entries: _root_.scala.collection.immutable.VectorBuilder[raft.transport.LogEntry] = new _root_.scala.collection.immutable.VectorBuilder[raft.transport.LogEntry]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __term = _input__.readInt64()
        case 16 =>
          __prevLogTrem = _input__.readInt64()
        case 24 =>
          __prevLogIndex = _input__.readInt64()
        case 32 =>
          __leaderCommit = _input__.readInt64()
        case 42 =>
          __leaderId = _input__.readStringRequireUtf8()
        case 50 =>
          __entries += _root_.scalapb.LiteParser.readMessage[raft.transport.LogEntry](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    raft.transport.AppendEntriesRequest(
        term = __term,
        prevLogTrem = __prevLogTrem,
        prevLogIndex = __prevLogIndex,
        leaderCommit = __leaderCommit,
        leaderId = __leaderId,
        entries = __entries.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[raft.transport.AppendEntriesRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      raft.transport.AppendEntriesRequest(
        term = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        prevLogTrem = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        prevLogIndex = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        leaderCommit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        leaderId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        entries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[raft.transport.LogEntry]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RaftProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RaftProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = raft.transport.LogEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = raft.transport.AppendEntriesRequest(
    term = 0L,
    prevLogTrem = 0L,
    prevLogIndex = 0L,
    leaderCommit = 0L,
    leaderId = "",
    entries = _root_.scala.Seq.empty
  )
  implicit class AppendEntriesRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, raft.transport.AppendEntriesRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, raft.transport.AppendEntriesRequest](_l) {
    def term: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.term)((c_, f_) => c_.copy(term = f_))
    def prevLogTrem: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.prevLogTrem)((c_, f_) => c_.copy(prevLogTrem = f_))
    def prevLogIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.prevLogIndex)((c_, f_) => c_.copy(prevLogIndex = f_))
    def leaderCommit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.leaderCommit)((c_, f_) => c_.copy(leaderCommit = f_))
    def leaderId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.leaderId)((c_, f_) => c_.copy(leaderId = f_))
    def entries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[raft.transport.LogEntry]] = field(_.entries)((c_, f_) => c_.copy(entries = f_))
  }
  final val TERM_FIELD_NUMBER = 1
  final val PREVLOGTREM_FIELD_NUMBER = 2
  final val PREVLOGINDEX_FIELD_NUMBER = 3
  final val LEADERCOMMIT_FIELD_NUMBER = 4
  final val LEADERID_FIELD_NUMBER = 5
  final val ENTRIES_FIELD_NUMBER = 6
  def of(
    term: _root_.scala.Long,
    prevLogTrem: _root_.scala.Long,
    prevLogIndex: _root_.scala.Long,
    leaderCommit: _root_.scala.Long,
    leaderId: _root_.scala.Predef.String,
    entries: _root_.scala.Seq[raft.transport.LogEntry]
  ): _root_.raft.transport.AppendEntriesRequest = _root_.raft.transport.AppendEntriesRequest(
    term,
    prevLogTrem,
    prevLogIndex,
    leaderCommit,
    leaderId,
    entries
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[raft.transport.AppendEntriesRequest])
}
